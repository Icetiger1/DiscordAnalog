@page "/register"
@using System.ComponentModel.DataAnnotations
@inject AuthService Auth
@inject NavigationManager Navigation

<EditForm Model="@model" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label>Username</label>
        <InputText @bind-Value="model.Username" class="form-control" />
        <ValidationMessage For="@(() => model.Username)" />
    </div>

    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="model.Password" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.Password)" />
    </div>

    <div class="form-group">
        <label>Confirm Password</label>
        <InputText @bind-Value="model.ConfirmPassword" type="password" class="form-control" />
        <ValidationMessage For="@(() => model.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
}

@code {
    private RegisterModel model = new();
    private string? errorMessage;

    private async Task HandleRegister()
    {
        errorMessage = null;

        if (model.Password != model.ConfirmPassword)
        {
            errorMessage = "Passwords don't match";
            return;
        }

        if (await Auth.RegisterAsync(model.Username, model.Password))
        {
            Navigation.NavigateTo("/");
        }
        else
        {
            errorMessage = "Registration failed. Please try again.";
        }
    }

    private class RegisterModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(20, ErrorMessage = "Username is too long")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}